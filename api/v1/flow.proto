syntax = "proto3";
import "google/protobuf/struct.proto";
option go_package="github.com/mohitkumar/api_v1";


message Action{
    string workflowName = 1;
    string flowId = 2;
    map<string,google.protobuf.Value> data = 3;
    int32 actionId  = 4;
    string actionName = 5;
    int32 retryCount = 6;
    enum Type{
        SYSTEM = 0;
        USER  = 1;
    }
    Type type = 7;
}

message Actions {
    repeated Action actions = 1;
}
message ActionResult{
    string workflowName = 1;
    string actionName = 2;
    string flowId = 3;
    int32 actionId = 4;
    map<string,google.protobuf.Value> data = 5;
    enum Status{
        SUCCESS = 0;
        FAIL  = 1;
    }
    Status status = 6;
    int32 retryCount = 7;
}

message ActionDefinition{
    string name = 1;
    int32 retryCount  = 2;
    int32 retryAfterSeconds = 3;
    string retryPolicy  = 4;
    int32 timeoutSeconds = 5;
}

message ActionDefinitionSaveResponse{
    bool status = 1;
}

message ActionPollRequest{
    string actionType = 1;
    int32 batchSize = 2;
}

message ActionResultPushResponse{
    bool status = 1;
}

message Server {
    string id = 1;
    string rpc_addr = 2;
}

message GetServersRequest {}

message GetServersResponse {
  repeated Server servers = 1;
}

service ActionService{
    rpc SaveActionDefinition(ActionDefinition) returns (ActionDefinitionSaveResponse){}
    rpc Poll(ActionPollRequest) returns (Actions){}
    rpc Push(ActionResult) returns (ActionResultPushResponse) {}
    rpc GetServers(GetServersRequest) returns (GetServersResponse) {}
}



package grpc.health.v1;
message HealthCheckRequest { string service = 1;
}
message HealthCheckResponse { enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
}
  ServingStatus status = 1;
}
service Health {
rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse); }